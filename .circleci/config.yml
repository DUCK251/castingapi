# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Orchestrate or schedule a set of jobs
jobs:
  build:
    docker:
      - image: python:3.8.1-slim-buster
        environment:
          APP_SETTINGS: config.DevelopmentConfig
          DATABASE_URL: postgresql://root:casting@localhost/castingapi_test
          AUTH0_DOMAIN: dev-hrmvva9b.us.auth0.com
          ALGORITHMS: RS256
          API_AUDIENCE: casting
      - image: postgres:12-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: "casting"
          POSTGRES_DB: castingapi_test
    steps:
      - checkout
      - restore_cache:
          key: dev-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: 
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y netcat
            pip install --upgrade pip
      - run:
          name: Install Python dependencies
          command: |
            python3 -m pip install --user virtualenv
            python3 -m venv env
            source env/bin/activate
      - save_cache:
          key: dev-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "env"
  test:
    docker:
      - image: python:3.8.1-slim-buster
        environment:
          APP_SETTINGS: config.DevelopmentConfig
          DATABASE_URL: postgresql://root:casting@localhost/castingapi_test
          AUTH0_DOMAIN: dev-hrmvva9b.us.auth0.com
          ALGORITHMS: RS256
          API_AUDIENCE: casting
      - image: postgres:12-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: "casting"
          POSTGRES_DB: castingapi_test
    steps:
      - checkout
      - restore_cache:
          key: dev-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: 
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y netcat
            pip install --upgrade pip
      - run:
          name: Install Python dependencies
          command: |
            python3 -m pip install --user virtualenv
            python3 -m venv env
            source env/bin/activate
      - save_cache:
          key: dev-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "env"
      - run:
          name: populate test cases
          command: |
            python manage.py db upgrade
            python3 test_case.py

workflows:
  castingapi_workflows:
    jobs:
      - build
      - test:
          requires:
            - build
